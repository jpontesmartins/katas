const pirates = require('./pirates');

describe('pirates', () => {
    it('should return position [[4,4]] for \'u\'  ', () => {

        const map = [
            ['p', '~', '~', '~', '~', '~', '~', '~'],
            ['~', '~', '~', '~', '~', '~', '~', '~'],
            ['~', '~', '~', '~', '~', '~', '~', '~'],
            ['~', '~', 'm', '~', '~', '~', '~', '~'],
            ['~', '~', '~', '~', 'u', '~', '~', '~'],
            ['~', '~', '~', '~', '~', '~', '~', '~'],
            ['~', '~', '~', '~', '~', '~', '~', '~'],
            ['~', '~', '~', '~', '~', '~', '~', '~']];

        const unoccupiedIsland = pirates.conquer(map);

        expect(unoccupiedIsland).toEqual([[4, 4]]);
    });

    it('should return position [[3,5]] for \'m\'  ', () => {

        const map = [
            ['p', '~', '~', '~', '~', '~', '~', '~'],
            ['~', '~', '~', '~', '~', '~', '~', '~'],
            ['~', '~', '~', '~', '~', '~', '~', '~'],
            ['~', '~', 'm', '~', '~', '~', '~', '~'],
            ['~', '~', '~', '~', '~', '~', '~', '~'],
            ['~', '~', '~', '~', '~', '~', '~', '~'],
            ['~', '~', '~', '~', '~', '~', '~', '~'],
            ['~', '~', '~', '~', '~', '~', '~', '~']];

        const unoccupiedIsland = pirates.conquer(map);

        expect(unoccupiedIsland).toEqual([[3, 2]]);
    });

    it('should return position [[1,1],[2,0]] for \'m\'  ', () => {

        const map = [
            ['p', '~', '~', '~', '~', '~', '~', '~'],
            ['~', 'm', '~', 'm', '~', '~', '~', '~'],
            ['m', '~', '~', '~', '~', '~', '~', '~'],
            ['~', '~', '~', '~', '~', '~', '~', '~'],
            ['~', '~', '~', '~', '~', 'm', '~', '~'],
            ['~', '~', '~', '~', '~', '~', '~', '~'],
            ['~', '~', '~', 'm', '~', '~', '~', '~'],
            ['~', '~', '~', '~', '~', '~', '~', '~']];

        const unoccupiedIsland = pirates.conquer(map);
        console.log(unoccupiedIsland);
        
        expect(unoccupiedIsland).toEqual([[1,1], [2,0]]);

    });


});